/*
 *
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * ShellWindow.java
 *
 * Created on Mar 4, 2010, 4:24:56 AM
 */
package org.europabarbarorum.cuf.gui;

import java.awt.Dimension;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.WindowConstants;
import org.europabarbarorum.cuf.gui.fontwizard.FontWizard;
import org.europabarbarorum.cuf.gui.support.UIHelp.Command;
import org.europabarbarorum.cuf.gui.support.UIHelp.Frame;
import org.europabarbarorum.cuf.gui.help.HelpService;
import org.europabarbarorum.cuf.gui.help.HelpLookup;
import org.europabarbarorum.cuf.gui.support.UIHelp;
import org.europabarbarorum.cuf.shell.Shell;
import org.europabarbarorum.cuf.support.ResourceHelp;

/**
 * A frame to wrap a stand-alone {@link ShellChrome} instance.
 * @author Johan Ouwerkerk
 */
public class ShellWindow extends Frame {

    /** Creates new form BeanForm */
    public ShellWindow () {
        super();
        action = new UIHelp<ShellWindow, Void>(this) {

            @Override
            public Command<ShellWindow, Void> find (String name) {
                return Actions.valueOf(name);
            }
        };
        initComponents();
    }

    private boolean helpEnabled () {
        return HelpService.JavaHelp.featureEnabled();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chrome = new ShellChrome();
        JMenuBar jMenuBar1 = new JMenuBar();
        JMenu appMenu = new JMenu();
        JMenuItem interpretItem = new JMenuItem();
        JMenuItem forkItem = new JMenuItem();
        JMenuItem exitItem = new JMenuItem();
        JMenu compileMenu = new JMenu();
        JMenuItem compileXML = new JMenuItem();
        JMenuItem compileFont = new JMenuItem();
        JMenu previewMenu = new JMenu();
        JMenuItem previewFontItem = new JMenuItem();
        JMenuItem previewStringItem = new JMenuItem();
        JMenu helpMenu = new JMenu();
        JMenuItem readmeItem = new JMenuItem();
        JMenuItem helpItem = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new Dimension(480, 360));
        setName("Form"); // NOI18N

        chrome.setName("chrome"); // NOI18N
        chrome.init(this);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        appMenu.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.appMenu.mnemonic").charAt(0));
        ResourceBundle bundle = ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI"); // NOI18N
        appMenu.setText(bundle.getString("ShellWindow.appMenu.text")); // NOI18N
        appMenu.setName("appMenu"); // NOI18N

        action.bind(interpretItem, Actions.InterpretScript);
        interpretItem.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.interpretItem.mnemonic").charAt(0));
        interpretItem.setText(bundle.getString("ShellWindow.interpretItem.text")); // NOI18N
        interpretItem.setName("interpretItem"); // NOI18N
        appMenu.add(interpretItem);

        action.bind(forkItem, Actions.ForkScript);
        forkItem.setText(bundle.getString("ShellWindow.forkItem.text")); // NOI18N
        forkItem.setName("forkItem"); // NOI18N
        appMenu.add(forkItem);

        action.bind(exitItem, Actions.Quit);
        exitItem.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.exitItem.mnemonic").charAt(0));
        exitItem.setText(bundle.getString("ShellWindow.exitItem.text")); // NOI18N
        exitItem.setName("exitItem"); // NOI18N
        appMenu.add(exitItem);

        jMenuBar1.add(appMenu);

        compileMenu.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.compileMenu.mnemonic").charAt(0));
        compileMenu.setText(bundle.getString("ShellWindow.compileMenu.text")); // NOI18N
        compileMenu.setActionCommand(bundle.getString("ShellWindow.compileMenu.actionCommand")); // NOI18N
        compileMenu.setName("compileMenu"); // NOI18N

        action.bind(compileXML, Actions.CompileXML);
        compileXML.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.compileXML.mnemonic").charAt(0));
        compileXML.setText(bundle.getString("ShellWindow.compileXML.text")); // NOI18N
        compileXML.setToolTipText(bundle.getString("ShellWindow.compileXML.toolTipText")); // NOI18N
        compileXML.setName("compileXML"); // NOI18N
        compileMenu.add(compileXML);

        action.bind(compileFont, Actions.CompileFont);
        compileFont.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.compileFont.mnemonic").charAt(0));
        compileFont.setText(bundle.getString("ShellWindow.compileFont.text")); // NOI18N
        compileFont.setToolTipText(bundle.getString("ShellWindow.compileFont.toolTipText")); // NOI18N
        compileFont.setName("compileFont"); // NOI18N
        compileMenu.add(compileFont);

        jMenuBar1.add(compileMenu);

        previewMenu.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.previewMenu.mnemonic").charAt(0));
        previewMenu.setText(bundle.getString("ShellWindow.previewMenu.text")); // NOI18N
        previewMenu.setName("previewMenu"); // NOI18N

        action.bind(previewFontItem, Actions.PreviewCUF);
        previewFontItem.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.previewFontItem.mnemonic").charAt(0));
        previewFontItem.setText(bundle.getString("ShellWindow.previewFontItem.text")); // NOI18N
        previewFontItem.setToolTipText(bundle.getString("ShellWindow.previewFontItem.toolTipText")); // NOI18N
        previewFontItem.setName("previewFontItem"); // NOI18N
        previewMenu.add(previewFontItem);

        action.bind(previewStringItem, Actions.PreviewStrings);
        previewStringItem.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.previewStringItem.mnemonic").charAt(0));
        previewStringItem.setText(bundle.getString("ShellWindow.previewStringItem.text")); // NOI18N
        previewStringItem.setToolTipText(bundle.getString("ShellWindow.previewStringItem.toolTipText")); // NOI18N
        previewStringItem.setName("previewStringItem"); // NOI18N
        previewMenu.add(previewStringItem);

        jMenuBar1.add(previewMenu);

        helpMenu.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.helpMenu.mnemonic").charAt(0));
        helpMenu.setText(bundle.getString("ShellWindow.helpMenu.text")); // NOI18N

        action.bind(readmeItem, Actions.Readme);
        readmeItem.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.readmeItem.mnemonic").charAt(0));
        readmeItem.setText(bundle.getString("ShellWindow.readmeItem.text")); // NOI18N
        readmeItem.setToolTipText(bundle.getString("ShellWindow.readmeItem.toolTipText")); // NOI18N
        readmeItem.setName("readmeItem"); // NOI18N
        helpMenu.add(readmeItem);

        action.bind(helpItem, Actions.HelpContents);
        helpItem.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/ShellWindowUI").getString("ShellWindow.helpItem.mnemonic").charAt(0));
        helpItem.setText(bundle.getString("ShellWindow.helpItem.text")); // NOI18N
        helpItem.setToolTipText(bundle.getString("ShellWindow.helpItem.toolTipText")); // NOI18N
        helpItem.setEnabled(helpEnabled());
        helpItem.setName("helpItem"); // NOI18N
        helpMenu.add(helpItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(chrome, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(chrome, GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private final UIHelp action;

    /**
     * List of {@link Command} actions supported by the {@link ShellWindow} UI.
     */
    public static enum Actions implements Command<ShellWindow, Void> {

        /**
         * Pop up a dialog to run a script through 
         * {@link Shell#fork(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.io.PrintStream, java.io.PrintStream, org.europabarbarorum.cuf.shell.Shell.CallBack, boolean) }.
         */
        ForkScript {

            @Override
            public void actionPerformed (ShellWindow window) {
                ScriptDialog.display(window, true, Shell.getCurrentShell());
            }
        },
        /**
         * Pop up a dialog to run a script through
         * {@link Shell#interpret(java.lang.String) }.
         */
        InterpretScript {

            @Override
            public void actionPerformed (ShellWindow window) {
                ScriptDialog.display(window, false, Shell.getCurrentShell());
            }
        },
        /**
         * Pop up a dialog to construct a preview of a CUF font.
         */
        PreviewCUF {

            @Override
            public void actionPerformed (ShellWindow window) {
                PreviewDialog.display(window, false, Shell.getCurrentShell());
            }
        },
        /**
         * Pop up a dialog to construct a preview of a Strings file.
         */
        PreviewStrings {

            @Override
            public void actionPerformed (ShellWindow window) {
                PreviewDialog.display(window, true, Shell.getCurrentShell());
            }
        },
        /**
         * Pop up a dialog to compile and XML file to the Strings format.
         */
        CompileXML {

            @Override
            public void actionPerformed (ShellWindow window) {
                CompileDialog.display(window, Shell.getCurrentShell());
            }
        },
        /**
         * Pop up a dialog to design CUF fonts.
         */
        CompileFont {

            @Override
            public void actionPerformed (ShellWindow window) {
                FontWizard.display(window, Shell.getCurrentShell());
            }
        },
        /**
         * Pop up embedded readme.html file.
         */
        Readme {

            @Override
            public void actionPerformed (ShellWindow window) {
                DocumentDialog.display("readme.html", window);
            }
        },
        /**
         * Navigates the help browser to the {@link HelpLookup#About About page}.
         */
        HelpContents {

            @Override
            public void actionPerformed (ShellWindow window) {
                HelpLookup.About.navigate(window);
            }
        },
        /**
         * Quit the {@link ShellWindow}.
         */
        Quit {

            @Override
            public void actionPerformed (ShellWindow window) {
                window.close();
            }
        };

        @Override
        public String getText () {
            return ResourceHelp.getValue(this, ShellWindow.class);
        }

        @Override
        public String format (Object... args) {
            return ResourceHelp.formatValue(this, ShellWindow.class, args);
        }

        @Override
        public Class type () {
            return ShellWindow.class;
        }

        @Override
        public boolean enabled (Void status, ShellWindow context) {
            return true;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ShellChrome chrome;
    // End of variables declaration//GEN-END:variables
}
