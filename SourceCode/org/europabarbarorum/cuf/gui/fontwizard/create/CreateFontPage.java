/*
 *  
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * CreateFontPage.java
 *
 * Created on Sep 19, 2010, 1:33:48 AM
 */
package org.europabarbarorum.cuf.gui.fontwizard.create;

import org.europabarbarorum.cuf.gui.fontwizard.common.AttachUI;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.LayoutStyle.ComponentPlacement;
import org.europabarbarorum.cuf.gui.fontwizard.FontOverviewPage.PageComponent;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode.BasicModel;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode.MixedFontNode;
import org.europabarbarorum.cuf.gui.fontwizard.FontWizard;
import org.europabarbarorum.cuf.gui.fontwizard.FontWizardPage;
import org.europabarbarorum.cuf.gui.fontwizard.FontWizardPage.FontTypeAction;
import org.europabarbarorum.cuf.gui.fontwizard.FontWizardPage.NextFontWizardPage;
import org.europabarbarorum.cuf.gui.fontwizard.WizardInstructionPage;
import org.europabarbarorum.cuf.gui.fontwizard.common.FontTableUI;
import org.europabarbarorum.cuf.gui.support.SettingOption.DropDown;
import org.europabarbarorum.cuf.shell.Shell;
import org.europabarbarorum.cuf.support.DefaultOption;

/**
 * A {@link NextFontWizardPage page} which provides the GUI common to all font types.
 * This page contains a form to set a name for the {@link BasicModel font node} and 
 * attach a script to perform post processing.
 * @author Johan Ouwerkerk
 */
public class CreateFontPage extends NextFontWizardPage<BasicModel> {

    /**
     * Create a new {@link CreateFontPage}.
     * @param parent the parent {@link FontTreeNode} to use.
     * @param context the context {@link Shell} to use.
     */
    public CreateFontPage (BasicModel parent, Shell context) {
        super(parent, context);
        initComponents();
    }

    @Override
    protected FontTypeAction getSelected () {
        DropDown d = ((DropDown) typeOption);
        return ((FontType) d.getModel().getSelectedItem().opt);
    }

    private boolean mixer () {
        FontTreeNode n = parentNode();
        return n != null && n.mixer();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JLabel instruction = new JLabel();
        typeOption = new DropDown(FontType.values(), CreateFontPage.class, FontType.class);
        attachUI = new AttachUI(getShell(), mixer(), parentNode(),null);

        setName("Form"); // NOI18N

        ResourceBundle bundle = ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/create/PageUI"); // NOI18N
        instruction.setText(bundle.getString("CreateFontPage.instruction.text")); // NOI18N
        instruction.setName("instruction"); // NOI18N

        typeOption.setName("typeOption"); // NOI18N

        attachUI.setName("attachUI"); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(typeOption, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(instruction)))
            .addComponent(attachUI, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instruction)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(typeOption, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(attachUI, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private AttachUI attachUI;
    protected JComboBox typeOption;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean checkUI () {
        return attachUI.checkUI();
    }

    @Override
    protected void fillIn (BasicModel node) {
        node.setModel(attachUI.createModel());
    }

    private static enum FontType implements DefaultOption, FontTypeAction {

        /**
         * Restricted font.
         */
        Restricted {

            @Override
            protected FontWizardPage page (CreateFontPage prev) {
                return new CreateRestrictedFontPage(prev);
            }
        },
        /**
         * Mapped font.
         */
        Mapped {

            @Override
            protected FontWizardPage page (CreateFontPage prev) {
                return new CreateMappedFontPage(prev);
            }
        },
        /**
         * Mixed font.
         */
        Mixed {
            //<editor-fold defaultstate="collapsed" desc="Mixed font logic">

            @Override
            protected FontWizardPage page (CreateFontPage p) {
                return new CreateFinalFontPage<FontTableUI, MixedFontNode>(p,
                                                                           pc()) {

                    @Override
                    protected MixedFontNode current () {
                        return new MixedFontNode(parentNode(), getShell());
                    }

                    @Override
                    protected void fillIn (MixedFontNode node) {
                        node.setTableWidgetsModel(ui().createModel());
                    }
                };
            }

            private PageComponent<FontTableUI> pc () {
                return new PageComponent<FontTableUI>() {

                    @Override
                    protected FontTableUI createUI () {
                        return new FontTableUI();
                    }
                };
            }
            //</editor-fold>
        },
        /**
         * Other (source) font.
         */
        Other {

            @Override
            protected FontWizardPage page (CreateFontPage prev) {
                return new CreateOtherFontPage(prev);
            }
        };

        @Override
        public DefaultOption defaultOption () {
            return Other;
        }

        /**
         * Create a {@link FontWizardPage}.
         * @param prev a previous {@link CreateFontPage}.
         * @return the {@link FontWizardPage} to continue with.
         */
        protected FontWizardPage page (CreateFontPage prev) {
            return new WizardInstructionPage(prev.parentNode(), prev.getShell());
        }

        @Override
        public void nextAction (FontWizard wiz, FontWizardPage prev) {
            wiz.setWizardPage(page((CreateFontPage) prev));
        }
    }
}
