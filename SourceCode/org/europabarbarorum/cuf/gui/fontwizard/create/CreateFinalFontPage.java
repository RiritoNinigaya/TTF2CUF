/*
 *  
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * CreateFinalFontPage.java
 *
 * Created on Sep 26, 2010, 12:18:30 AM
 */
package org.europabarbarorum.cuf.gui.fontwizard.create;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import org.europabarbarorum.cuf.gui.fontwizard.FontOverviewPage.PageComponent;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode.BasicModel;
import org.europabarbarorum.cuf.gui.fontwizard.FontWizardPage;
import org.europabarbarorum.cuf.gui.fontwizard.FontWizardPage.CreateFontLastPage;
import org.europabarbarorum.cuf.gui.support.ComponentState;
import org.europabarbarorum.cuf.gui.support.ReplacementPanel;
import org.europabarbarorum.cuf.shell.Shell;

/**
 * A {@link CreateFontLastPage} which presents a single main {@link ComponentState GUI component} on the page.
 * @param <N> type of {@link FontTreeNode node} created/updated by this {@link CreateFontLastPage}.
 * @param <U> type of {@link ComponentState GUI component} displayed by this {@link CreateFontLastPage}.
 * @see PageComponent
 * @author Johan Ouwerkerk
 */
public abstract class CreateFinalFontPage<U extends ComponentState, N extends BasicModel> extends CreateFontLastPage<N> {

    private final PageComponent<U> delegate;

    /**
     * Create a new {@link CreateFinalFontPage}
     * @param prev the previous {@link FontWizardPage}.
     * @param delegate a {@link PageComponent} object responsible for creating the main
     * {@link ComponentState GUI component} displayed in this {@link CreateFinalFontPage}.
     */
    public CreateFinalFontPage (FontWizardPage<BasicModel> prev,
                                PageComponent<U> delegate) {
        super(prev);
        this.delegate = delegate;
        initComponents();
    }

    /**
     * Create a new {@link CreateFinalFontPage}. This constructor is appropriate
     * for the first {@link FontWizardPage} in a series or for a single stand-alone page.
     * @param node the context {@link FontTreeNode} to use.
     * @param shell the context {@link Shell} to use.
     * @param delegate a {@link PageComponent} object responsible for creating the main
     * {@link ComponentState GUI component} displayed in this {@link CreateFinalFontPage}.
     */
    public CreateFinalFontPage (FontTreeNode node, Shell shell,
                                PageComponent<U> delegate) {
        super(node, shell);
        this.delegate = delegate;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ReplacementPanel replacementPanel = new ReplacementPanel();

        setName("Form"); // NOI18N

        replacementPanel.setName("replacementPanel"); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(replacementPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(replacementPanel, GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );

        replacementPanel.swap(delegate.panel());
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Access the main {@link ComponentState GUI component} displayed in
     * this {@link CreateFinalFontPage}.
     * @return the {@link PageComponent#componentState() main GUI component}  of this page.
     */
    protected U ui () {
        return delegate.componentState();
    }

    @Override
    public final boolean checkUI () {
        return delegate.componentState().checkUI();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
