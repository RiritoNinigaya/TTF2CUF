/*
 *  
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * ArrayRestrictionUI.java
 *
 * Created on Sep 22, 2010, 2:05:54 AM
 */
package org.europabarbarorum.cuf.gui.fontwizard.common;

import org.europabarbarorum.cuf.gui.support.ScrollingSupport;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import org.europabarbarorum.cuf.font.CUFSource;
import org.europabarbarorum.cuf.gui.fontwizard.common.ArrayRestrictionUI.Model;
import org.europabarbarorum.cuf.gui.support.ComponentState.ComponentModel;
import org.europabarbarorum.cuf.gui.support.CharacterSettingArea;
import org.europabarbarorum.cuf.gui.support.ComponentState;

/**
 * A GUI form to declaratively specify a restriction on a {@link CUFSource} by
 * listing all (dis)allowed characters.
 * @author Johan Ouwerkerk
 */
public class ArrayRestrictionUI extends JPanel implements ComponentState<Model> {

    /** Creates new form ArrayRestrictionUI */
    public ArrayRestrictionUI () {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        invert = new JCheckBox();
        JScrollPane jScrollPane1 = new ScrollingSupport();
        list = new CharacterSettingArea();

        setName("Form"); // NOI18N

        ResourceBundle bundle = ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/CommonUI"); // NOI18N
        invert.setText(bundle.getString("ArrayRestrictionUI.invert.text")); // NOI18N
        invert.setName("invert"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        list.setColumns(20);
        list.setRows(5);
        list.setName("list"); // NOI18N
        jScrollPane1.setViewportView(list);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(invert))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(invert)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox invert;
    private CharacterSettingArea list;
    // End of variables declaration//GEN-END:variables

    @Override
    public Model createModel () {
        return new Model(list.getValue(), invert.isSelected());
    }

    @Override
    public boolean checkUI () {
        return list.checkUI();
    }

    /**
     * The {@link ComponentModel} for the {@link ArrayRestrictionUI} component.
     */
    public static class Model implements ComponentModel<ArrayRestrictionUI> {

        /**
         * The range of characters selected.
         */
        public String list;
        /**
         * Whether or not {@link #list} defines the characters to exclude.
         */
        public boolean invert;

        private Model (String l, boolean inv) {
            this.invert = inv;
            this.list = l;
        }

        @Override
        public void populate (ArrayRestrictionUI ui) {
            ui.list.setValue(list);
            ui.invert.setSelected(invert);
        }
    }
}
