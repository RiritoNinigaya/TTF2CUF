/*
 *  
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * NormaliseUI.java
 *
 * Created on Dec 19, 2010, 7:54:29 PM
 */
package org.europabarbarorum.cuf.gui.fontwizard.common;

import org.europabarbarorum.cuf.gui.support.ScrollingSupport;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import org.europabarbarorum.cuf.font.CUFSource;
import org.europabarbarorum.cuf.gui.fontwizard.FontTree;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode.BuildException;
import org.europabarbarorum.cuf.gui.fontwizard.common.NormaliseUI.Model;
import org.europabarbarorum.cuf.gui.support.ComponentState;
import org.europabarbarorum.cuf.gui.support.ComponentState.ComponentModel;

/**
 *
 * @author Johan Ouwerkerk
 */
public class NormaliseUI extends JPanel implements ComponentState<Model> {

    /** 
     * Create a new {@link NormaliseUI}
     * @param top the {@link FontTreeNode} which is the root/top
     * of the {@link FontTree tree}.
     */
    public NormaliseUI (FontTreeNode top) {
        this.top=top;
        initComponents();
    }
    private final FontTreeNode top;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JLabel instruction = new JLabel();
        JScrollPane jScrollPane1 = new ScrollingSupport();
        tree = new FontTree(top);

        setName("Form"); // NOI18N

        instruction.setHorizontalAlignment(SwingConstants.CENTER);
        instruction.setLabelFor(tree);
        ResourceBundle bundle = ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/CommonUI"); // NOI18N
        instruction.setText(bundle.getString("NormaliseUI.instruction.text")); // NOI18N
        instruction.setName("instruction"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tree.setName("tree"); // NOI18N
        jScrollPane1.setViewportView(tree);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(instruction, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instruction)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private FontTree tree;
    // End of variables declaration//GEN-END:variables

    @Override
    public Model createModel () {
        return new Model(tree.getSelectedNode());
    }

    @Override
    public boolean checkUI () {
        FontTreeNode node = tree.getSelectedNode();
        return node != null && node.isLeaf();
    }

    /**
     * A {@link ComponentModel} for {@link NormaliseUI}.
     */
    public static class Model implements ComponentModel<NormaliseUI> {

        private final FontTreeNode node;
        /**
         * Build the normal/default {@link CUFSource font}.
         * @return the created {@link CUFSource font}.
         * @throws org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode.BuildException
         * if an error occurs.
         */
        public CUFSource realise() throws BuildException{
            return node.create();
        }

        private Model (FontTreeNode selectedNode) {
            this.node = selectedNode;
        }

        @Override
        public void populate (NormaliseUI ui) {
            ui.tree.select(node);
        }
    }
}
