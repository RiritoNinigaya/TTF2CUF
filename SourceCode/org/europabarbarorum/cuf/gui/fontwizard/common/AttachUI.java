/*
 *  
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * AttachUI.java
 *
 * Created on Sep 19, 2010, 6:35:07 PM
 */
package org.europabarbarorum.cuf.gui.fontwizard.common;

import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import org.europabarbarorum.cuf.font.MixedSource.MixinMode;
import org.europabarbarorum.cuf.gui.fontwizard.common.AttachUI.Model;
import org.europabarbarorum.cuf.gui.fontwizard.FontTreeNode;
import org.europabarbarorum.cuf.gui.fontwizard.MessageScripts;
import org.europabarbarorum.cuf.gui.support.ComponentState;
import org.europabarbarorum.cuf.gui.support.ComponentState.ComponentModel;
import org.europabarbarorum.cuf.shell.Shell;

/**
 * A GUI form to attach meta information to a {@link FontTreeNode}.
 * The form provides components to set a name and a font post processing script.
 * @author Johan Ouwerkerk
 */
public class AttachUI extends JPanel implements ComponentState<Model> {

    private final Shell context;
    private final String name;
    private final FontTreeNode parent;

    /**
     * Creates a new {@link AttachUI}.
     * @param context the {@link Shell} used for resolving relative file paths.
     * @param mixed whether or not the UI for selecting mixer settings should be enabled.
     * @param parent the parent {@link FontTreeNode} which determines what names
     * can not be chosen in this {@link AttachUI}.
     * @param name the original name of the current node, or null if no name for the node
     * has been set yet.
     */
    public AttachUI (Shell context,
                     boolean mixed,
                     FontTreeNode parent,
                     String name) {
        this.context = context;
        this.parent=parent;
        this.name = name;
        initComponents();
        setMixer(mixed);
    }

    /**
     * Create a new {@link AttachUI} for GUI builder purposes.
     * Makes this class a valid JavaBean.
     */
    @SuppressWarnings("unchecked")
    public AttachUI () {
        this(null, true, null, null);
    }

    /**
     * Toggles the  {@link JCheckBox checkbox} which sets the {@link MixinMode} on the current
     * {@link FontTreeNode}.
     * @param enabled whether or not the {@link JCheckBox checkbox} should be visible/enabled.
     */
    public final void setMixer (boolean enabled) {
        this.keepToggle.setEnabled(enabled);
        this.keepToggle.setVisible(enabled);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scriptUI = new ScriptUI(context, true);
        JPanel jPanel1 = new JPanel();
        JLabel instruction = new JLabel();
        fontNameUI = new FontNameUI(parent, name);
        keepToggle = new JCheckBox();

        setName("Form"); // NOI18N

        scriptUI.setScript(MessageScripts.AttachUI);
        scriptUI.setName("scriptUI"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        instruction.setHorizontalAlignment(SwingConstants.CENTER);
        ResourceBundle bundle = ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/CommonUI"); // NOI18N
        instruction.setText(bundle.getString("AttachUI.instruction.text")); // NOI18N
        instruction.setName("instruction"); // NOI18N

        fontNameUI.setName("fontNameUI"); // NOI18N

        keepToggle.setText(bundle.getString("AttachUI.keepToggle.text")); // NOI18N
        keepToggle.setName("keepToggle"); // NOI18N

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(fontNameUI, GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(keepToggle)
                .addGap(30, 30, 30))
            .addComponent(instruction, GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(fontNameUI, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(keepToggle)))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(instruction)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scriptUI, GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(scriptUI, GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private FontNameUI fontNameUI;
    private JCheckBox keepToggle;
    private ScriptUI scriptUI;
    // End of variables declaration//GEN-END:variables

    

    @Override
    public boolean checkUI () {
        boolean v1 = scriptUI.checkUI(), v2 = fontNameUI.checkUI();
        return v1 && v2;
    }

    /**
     * The {@link ComponentModel} for the {@link AttachUI} component.
     */
    public static class Model implements ComponentModel<AttachUI> {

        /**
         * The {@link MixinMode} selected for the font.
         */
        public MixinMode mode;
        /**
         * The {@link ComponentModel} for the {@link ScriptUI} component.
         */
        public final ScriptUI.Model script;
        /**
         * The name specified for the font node.
         */
        public final FontNameUI.Model name;

        private Model (AttachUI ui) {
            this.name = ui.fontNameUI.createModel();
            this.script = ui.scriptUI.createModel();
            this.mode = getToggle(ui.keepToggle);
        }

        @Override
        public void populate (AttachUI ui) {
            name.populate(ui.fontNameUI);
            script.populate(ui.scriptUI);
            ui.keepToggle.setSelected(mode == MixinMode.Keep);
        }

        private MixinMode getToggle (JToggleButton button) {
            return button.isSelected() ? MixinMode.Keep : MixinMode.Remove;
        }
    }

    @Override
    public Model createModel () {
        return new Model(this);
    }
}
