/*
 *  
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * ArrayMappingUI.java
 *
 * Created on Sep 20, 2010, 11:53:32 PM
 */
package org.europabarbarorum.cuf.gui.fontwizard.common;

import org.europabarbarorum.cuf.gui.support.ScrollingSupport;
import java.util.ResourceBundle;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.europabarbarorum.cuf.font.CUFSource;
import org.europabarbarorum.cuf.gui.fontwizard.common.ArrayMappingUI.Model;
import org.europabarbarorum.cuf.gui.support.ComponentState.ComponentModel;
import org.europabarbarorum.cuf.gui.support.CharacterSettingArea;
import org.europabarbarorum.cuf.gui.support.ComponentState;

/**
 * A GUI form to declaratively specify a mapping for a {@link CUFSource} by means of two character lists.
 * @author Johan Ouwerkerk
 */
public class ArrayMappingUI extends JPanel implements ComponentState<Model> {

    /** Creates new form ArrayMappingUI */
    public ArrayMappingUI () {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JScrollPane from = new ScrollingSupport();
        fromField = new CharacterSettingArea();
        JScrollPane to = new ScrollingSupport();
        toField = new CharacterSettingArea();

        setName("Form"); // NOI18N
        ResourceBundle bundle = ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/CommonUI");
        from.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(bundle.getString("ArrayMappingUI.from.title")), from.getBorder())); // NOI18N
        from.setName("from"); // NOI18N

        fromField.setColumns(20);
        fromField.setRows(5);
        fromField.setName("fromField"); // NOI18N
        from.setViewportView(fromField);

        to.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(bundle.getString("ArrayMappingUI.to.title")), to.getBorder())); // NOI18N
        to.setName("to"); // NOI18N

        toField.setColumns(20);
        toField.setRows(5);
        toField.setName("toField"); // NOI18N
        to.setViewportView(toField);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(to, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(from, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(from, GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(to, GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private CharacterSettingArea fromField;
    private CharacterSettingArea toField;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean checkUI () {
        boolean t1 = toField.checkUI(), t2 = fromField.checkUI();
        return t1 && t2 && toField.array().length == fromField.array().length;
    }

    /**
     * The {@link ComponentModel} for the {@link ArrayMappingUI} component.
     */
    public static class Model implements ComponentModel<ArrayMappingUI> {

        /**
         * The list of characters to remap.
         */
        public final String from;
        /**
         * The list of characters to map to.
         */
        public final String to;

        private Model (String from, String to) {
            this.from = from;
            this.to = to;
        }

        @Override
        public void populate (ArrayMappingUI ui) {
            ui.fromField.setValue(from);
            ui.toField.setValue(to);
        }
    }

    @Override
    public Model createModel () {
        return new Model(fromField.getValue(), toField.getValue());
    }
}
