/*
 *  
 *  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *      * Neither the name of The Europa Barbarorum Team nor the
 *        names of other contributors may be used to endorse or promote products
 *        derived from this software without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * FontTableUI.java
 *
 * Created on Dec 16, 2010, 12:32:32 AM
 */
package org.europabarbarorum.cuf.gui.fontwizard.common;

import org.europabarbarorum.cuf.gui.support.ScrollingSupport;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import org.europabarbarorum.cuf.gui.FontTableModel.EditorDelegate;
import org.europabarbarorum.cuf.gui.FontTableModel.Radix;
import org.europabarbarorum.cuf.gui.FontTableWidgets.FontWizardTableWidgets;
import org.europabarbarorum.cuf.gui.FontTableWidgets.FontWizardWidgetsModel;
import org.europabarbarorum.cuf.gui.support.ComponentState;
import org.europabarbarorum.cuf.gui.support.ComponentState.ComponentModel;
import org.europabarbarorum.cuf.support.OptionMap;

/**
 *
 * @author Johan Ouwerkerk
 */
public class FontTableUI extends JPanel implements
        ComponentState<FontWizardWidgetsModel> {

    private final FontWizardTableWidgets widgets;

    /**
     * Create a new {@link FontTableUI}.
     * @param model a {@link ComponentModel model} to populate the GUI with values.
     * @see FontWizardTableWidgets
     */
    public FontTableUI (ComponentModel<FontWizardTableWidgets> model) {
        widgets = new FontWizardTableWidgets();
        initComponents();
        model.populate(widgets);
    }

    /**
     * Create a new {@link FontTableUI}.
     */
    public FontTableUI () {
        this(new FontWizardWidgetsModel(OptionMap.getDefault(Radix.class),
                                        new EditorDelegate()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JScrollPane jScrollPane1 = new ScrollingSupport();
        JTable table = widgets.table();
        JLabel label = new JLabel();
        JRadioButton binary = widgets.binary();
        JRadioButton decimal = widgets.decimal();
        JRadioButton hexadecimal = widgets.hexadecimal();
        JLabel instruction = new JLabel();

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        table.setName("table"); // NOI18N
        jScrollPane1.setViewportView(table);

        ResourceBundle bundle = ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/FontTableUI"); // NOI18N
        label.setText(bundle.getString("FontTableUI.label.text")); // NOI18N
        label.setName("label"); // NOI18N

        binary.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/FontTableUI").getString("FontTableUI.binary.mnemonic").charAt(0));
        binary.setText(bundle.getString("FontTableUI.binary.text")); // NOI18N
        binary.setToolTipText(bundle.getString("FontTableUI.binary.toolTipText")); // NOI18N
        binary.setName("binary"); // NOI18N

        decimal.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/FontTableUI").getString("FontTableUI.decimal.mnemonic").charAt(0));
        decimal.setText(bundle.getString("FontTableUI.decimal.text")); // NOI18N
        decimal.setToolTipText(bundle.getString("FontTableUI.decimal.toolTipText")); // NOI18N
        decimal.setName("decimal"); // NOI18N

        hexadecimal.setMnemonic(ResourceBundle.getBundle("org/europabarbarorum/cuf/gui/fontwizard/common/FontTableUI").getString("FontTableUI.hexadecimal.mnemonic").charAt(0));
        hexadecimal.setText(bundle.getString("FontTableUI.hexadecimal.text")); // NOI18N
        hexadecimal.setToolTipText(bundle.getString("FontTableUI.hexadecimal.toolTipText")); // NOI18N
        hexadecimal.setName("hexadecimal"); // NOI18N

        instruction.setHorizontalAlignment(SwingConstants.CENTER);
        instruction.setText(bundle.getString("FontTableUI.instruction.text")); // NOI18N
        instruction.setName("instruction"); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label)
                        .addGap(18, 18, 18)
                        .addComponent(binary)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(decimal)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(hexadecimal))
                    .addComponent(instruction, GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instruction)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(label)
                    .addComponent(binary)
                    .addComponent(decimal)
                    .addComponent(hexadecimal))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public FontWizardWidgetsModel createModel () {
        return widgets.createModel();
    }

    @Override
    public boolean checkUI () {
        return widgets.checkUI();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
