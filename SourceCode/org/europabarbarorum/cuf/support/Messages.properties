#
#  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of The Europa Barbarorum Team nor the
#        names of other contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Message when a path parser is fed an invalid context...
PathParser.Glob.ResetGlobContext=\
    The given file path \u201c%1$s\u201d does not refer to a valid base directory.%n\
    The base directory will be reset to \u201c%2$s\u201d.
#Error when the user tries to open a file that cannot be read/does not exist.
PathParser.ReaderInvalidFileError=\
    Not a valid filepath, or unable to open the file: %1$s%nDetails: %2$s
#Error when the user attempts to open a file for writing that does not exist or cannot be written to.
PathParser.WriterInvalidFileError=\
    Not a valid filepath, or unable to open the file: %1$s%nDetails: %2$s
#Error when the user attempts to remove a non-existing file.
PathParser.RemoveInvalidFileError=\
    File does not exist: %1$s
#Error when a file path cannot be converted to canonical representation (symlinks resolved etc. etc.).
PathParser.PathResolveError=\
    File path cannot be resolved: %1$s%nDetails: %2$s
# error when the program is unable to inspect a file to determine its file type
MimeTag.UnexpectedMimeError=\
    Unable to recognize file type of: %1$s. An error occured: %2$s
MimeTag.MimeTypeInvalid=\
    Wrong mime type for: %1$s. Details: %2$s.
# the program attempts to format a localised message but an error occurs
ResourceHelp.ResourceFormatError=\
    Unable to format resource %1$s in %2$s. Details:%n%3$s
# error when the program attempts to look up a localised message but it is not available
# this error should be caught during automated testing of the program.
ResourceHelp.NoSuchResource=\
    Unable to find resource for %1$s in %2$s. Key: %3$s
# error when a string representing a character array data does not follow expected syntax
ResourceHelp.CharacterArrayResource.CharacterArraySyntaxError=\
    Character at position %1$d does not match expected value: \u2018%2$s\u2019, found: \u2018%3$s\u2019
ResourceHelp.CharacterArrayResource.CharacterArrayLengthError=\
    The length of the string does not correspond to a valid character array: %1$d
# message when some compiler is done compiling a given file
CompileJob.FileJob.CompilationDone=\
    Done compiling: %1$s
# error when a compiler aborts the compilation of a given file due to some other error
CompileJob.FileJob.CompilationAborted=\
    Aborted compilation of: %1$s: earlier error(s) prevent further processing: %2$s
# message when a temporary file is created by a compiler
CompileJob.FileJob.Tempfile=\
    Creating temporary file; this file will be deleted when the program exits.
# error when someone attempts to edit read-only data
NotEditableException.NotEditableMessage=\
    This object is read-only. Did you forget to check capabilities first?
# error when feature is loaded but not properly installed
AbstractFeature.FeatureInitError=\
    %1$s is not properly installed: error while checking: %2$s%n\
    Details: %3$s.
# error when feature was disabled at compile time
AbstractFeature.FeatureNotCompiledError=\
    The program has been compiled with disabled support for %1$s.
AbstractFeature.FeatureProviderInitError=\
    %1$s is not properly implemented in: %2$s%n\
    Details: %3$s.
AbstractFeature.FeatureProviderInvalid=\
    Bug detected: %1$s is not properly implemented in: %2$s%n\
    Details: %3$s.
AbstractFeature.FeatureProviderTypeError=\
    Bug detected: %1$s is not properly implemented: %2$s is not an subtype of: %3$s.
AbstractFeature.NoFeatureFound=\
    Bug detected: %1$s is not properly implemented. No feature annotation found.
IllegalMethodCallException.IllegalMethodCall=\
    Bug detected: this method should not have been called!
# error when the user supplies a null value (lack of value)
Setting.SettingValueInvalid=\
    Value should not be null
# error when the user supplies an invalid value for a setting
Setting.SettingParseError=\
    Unable to adjust setting: %1$s. \
    Will keep the original setting (%2$s).%nDetails:%n\
        \tCannot parse the given value: %3$s.%n\
        \tError message: %4$s
# error when the setting can't be removed
Setting.SettingClearError=\
    Some error prevents this setting from being cleared: %1$s.%nDetails: %2$s
# error when the setting can't be saved
Setting.SettingCleanError=\
    Some error prevents the storage from being cleared.%nDetails: %1$s
Classloader.ExpansionPathInvalid=\
    Warning: expansion path invalid (file does not exist):%n\
    \u201c%1$s\u201d%n\
    Got \u201c%2$s\u201d with ${base}: \u201c%3$s\u201d, in entry: \u201c%4$s\u201d.
Classloader.ExpansionAdded=\
    [Added classpath element] : %1$s%n
Classloader.NoExpansionPath=\
    Unable to read classpath configuration file: \u201c%1$s\u201d%n\
    Details: %2$s.
Classloader.ExpansionPushed=\
    [Pushed classpath element] : %1$s%n
Classloader.FeatureRegistered=\
    [Feature class added] : %1$s%n
Classloader.ClassLoaded=\
    [Class loaded] : \u201c%1$s\u201d from: %2$s%n
Classloader.ClasspathConfNotFound=\
    Classpath configuration file not found: %1$s
# error when a compiler option is set to an invalid value
OptionMap.InvalidOptionValue=\
    Illegal value for option: %1$s. Replaced given value \u201c%2$s\u201d with default: %3$s.
OptionMap.IllegalOptionType=\
    Unable to retrieve a proper default option for setting type: %1$s
