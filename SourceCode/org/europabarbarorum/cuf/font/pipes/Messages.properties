#
#  Copyright (C) 2010, 2011, 2012 The Europa Barbarorum Team
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of The Europa Barbarorum Team nor the
#        names of other contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL The Europa Barbarorum Team BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

! This file lists terse error messages (of highly technical nature).

# there is a concept of transformations which can be thought of as an operation on
# data supplied by the font apparently, one of those operations failed.
Phase.TransformFailed=\
    Transformation failed.%nDetails: %1$s
# Essentially the same as above, but detected at a different point in the program,
# this error means that the number of transformations which completed successfully
# was less than expected.
Phase.ValidationFailed=\
    Assertion failed: %1$d < %2$d. (Output validation failed.)
# An error when the user/programmer forgot to provide at least one transformation
Phase.MissingRequiredTransform=\
    This phase must not be empty!
# error when the program is unable to read the required bytes from a given CUF file
CUFReader.NotEnoughData=\
    Unable to read sufficient data (unexpected end of file).%nDetails:\
    %nAt offset: 0x%1$x%nRequested: 0x%2$x (%2$d)%nGot: 0x%3$x (%3$d)
# error when the program refuses to continue because it is locked onto a given file
CUFReader.FileConflict=\
    Reader is already in use for a different file.\
    %nDetails:%nFile to open: %1$s%nFile already opened: %2$s
# error when the program refuses to continue with a given CUF file
CUFReader.IOTainted=\
    Error at: %1$s: IO transaction is tainted by earlier errors.%nDetails: %2$s
# error when the user is doing something really silly
AbstractPhaseSource.ExposeInvalidError=\
    Validation failed: cannot expose a null.
# error when the user of a given font didn't bother to check it
# before registering a transformation with a font anyway
AbstractPhaseSource.NotExposedError=\
    Validation failed: pipe does not contain the exposed phase: %1$s
# error when the font uses the built-in rendering `pipeline' implementation but
# does not bother to specify how it should be constructed.
# a pipeline is the sequence of phase's in which transformations are applied.
AbstractPhaseSource.EmptyPipeLineError=\
    Not a valid pipeline: empty array (length: 0).
# error a font is not bothering to set up a proper `pipeline' despite claiming that it does
AbstractPhaseSource.NullPipeLineError=\
    Not a valid pipeline: empty array (null).